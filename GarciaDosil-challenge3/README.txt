    ▄▄▄▄     ▄▄▄▄    ▄▄▄   ▄▄  ▄▄▄▄▄       ▄▄▄▄    ▄▄▄▄▄▄   
  ██▀▀▀▀█   ██▀▀██   ███   ██  ██▀▀▀██    ██▀▀██   ██▀▀▀▀██ 
 ██▀       ██    ██  ██▀█  ██  ██    ██  ██    ██  ██    ██ 
 ██        ██    ██  ██ ██ ██  ██    ██  ██    ██  ███████  
 ██▄       ██    ██  ██  █▄██  ██    ██  ██    ██  ██  ▀██▄ 
  ██▄▄▄▄█   ██▄▄██   ██   ███  ██▄▄▄██    ██▄▄██   ██    ██ 
    ▀▀▀▀     ▀▀▀▀    ▀▀   ▀▀▀  ▀▀▀▀▀       ▀▀▀▀    ▀▀    ▀▀▀

1. SYN FLOOD SIMULATION

In order to SYN flood the target machine we must send 9 packets with "disable" as payload.  Implemented in synflood.py


2. SEQ NUMBER PREDICTION 

We obtain this number by sending several SYN packets and analyzing the sequence numbers sent by the server after each RST.  Substracting consecutive SEQ numbers, we find out that SEQ numbers are incremented 128.000 each RST. This is coded in predict.py.
This prediction is performed as well in exploit.py in order to perform the connection spoofing.


3. CONNECTION SPOOFING

The following messages are sent in order to make a connection from server to xterm
server --- SYN ---> xterm
xterm  --- SYN/ACK --> server
server --- ACK --> xterm

In order to spoof the connection, we must spoof both the SYN and the ACK messages.

Spoofing SYN is straightforward (modify src and dst ip addresses)

In order to spoof the ACK packet we require the sequence number sent in SYN/ACK from xterm.  As seen above we can predict this number.
The ACK value we must sent is the predicted sequence number + 1.

With this the connection is spoofed (Although this is done blindly for us. We obtain no feedback as all packets are directed towards the SYN flooded server).

Implemented in exploit.py


4. PAYLOAD INJECTION

At http://www.gnu.org/software/inetutils/manual/html_node/rshd-invocation.html we can obtain all the parameters required for constructing our payload.
"\0" to as payload to accept our the rest of our payload
"tsutomu\0tsutomu\0echo + + > /home/tsutomu/.rhosts\0" twice the user name plus the command we want to execute

Injecting + + in the rhosts file we can access the xterm from any untrusted machine through rsh.

Implemented in exploit.py


REFERENCES:
Shimomura, T. (Jan. 25, 1995) Technical details of the attack described by Markoff in NYT
	(http://webpages.cs.luc.edu/~pld/courses/447/sum08/class7/shimomura.text)
Apple (1999) rlogin.c source code
	(http://www.opensource.apple.com/source/network_cmds/network_cmds-77/rlogin.tproj/rlogin.c)
O'Connor, TJ () Violent Python: A Codebook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers
